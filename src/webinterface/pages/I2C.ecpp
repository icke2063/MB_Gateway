<& common_functions.authentification qparam >
<& common_functions.doctype qparam >
<& common_functions.html_head qparam >
<& common_functions.header qparam >
<& form_i2c qparam>
<& common_functions.footer qparam >

<%pre>
#include <stddef.h>
#include <string>
using std::string;

#include "boost/serialization/singleton.hpp"

#include <SlaveList.h>
#include <SummerySlave.h>
using namespace icke2063::MB_Gateway;

#include <I2CComm.h>
#include <I2CSlave.h>
using namespace icke2063::MB_Gateway::I2C;

#ifndef ICKE2063_CRUMBY_NO_CPP11
#include <memory>
	using namespace std;
#else
#include <boost/shared_ptr.hpp>
	using namespace boost;
#endif


</%pre>

<%request scope="page">

</%request>

<####################################>
<# i2c formular for read/write		#>
<####################################>
<%def form_i2c>

<%args>
int SlaveNr = 0;
int i2c_address_mode = 1;
int i2c_data_mode = 1;
size_t i2c_max_stringlength = 20;

int i2c_address = -1;

string btn_i2c_form = "";
int i2c_value = -1;
std::string i2c_string = "";

</%args>
<div id="i2c_form">
<%cpp>
shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
if( p_slave.get() != NULL )
{	
	uint8_t recvbuffer[100];
	bool i2copen = false;
	
if(btn_i2c_form == "Read")
{

	shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
	if( p_slave != NULL )
	{
		shared_ptr<I2C_Slave> p_i2c_slave = dynamic_pointer_cast<I2C_Slave>(p_slave);
	
		if(p_i2c_slave.get() == NULL)return 0;		//no IO_Board object -> exit function

		//get data by i2c request		
		if(	p_i2c_slave->getI2CComm()->i2cOpen() ) i2copen = true;
					
		switch(i2c_address_mode){
			case 1:
				recvbuffer[0] = (i2c_address & 0xff); //first only	
				break;
			case 2:
				recvbuffer[0] = (i2c_address >> 8); //first high
				recvbuffer[1] = (i2c_address & 0xff); //second low	
				break;
			default:
				recvbuffer[0] = 0;	
				break;
		}
 
		if(i2copen && p_i2c_slave->getI2CComm()->Read_I2C_Bytes(SlaveNr, recvbuffer, i2c_address_mode, 1))
		{
			i2c_value = recvbuffer[0];
		}						
	}
	
}
if(btn_i2c_form == "Write")
{

	shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
	if( p_slave != NULL )
	{
		shared_ptr<I2C_Slave> p_i2c_slave = dynamic_pointer_cast<I2C_Slave>(p_slave);
	
		if(p_i2c_slave.get() == NULL)return 0;		//no I2C_Slave object -> exit function

		//get data by i2c request		
		if(	p_i2c_slave->getI2CComm()->i2cOpen() ) i2copen = true;
					
	int length = 0;
		switch(i2c_address_mode)
		{
			case 1:
				recvbuffer[0] = (i2c_address & 0xff); //first only
				if(i2c_data_mode == 1){
					recvbuffer[1] = (i2c_value & 0xff);
					length = 1;
				}
				if(i2c_data_mode == 2){
					length =  (i2c_string.size()>i2c_max_stringlength)?i2c_max_stringlength:i2c_string.size();
					memcpy(&recvbuffer[1], i2c_string.c_str(), length);
					
				}	
				
				break;
			case 2:
				recvbuffer[0] = (i2c_address >> 8); //first high
				recvbuffer[1] = (i2c_address & 0xff); //second low
				if(i2c_data_mode == 1){
					recvbuffer[2] = (i2c_value & 0xff);
					length = 1;
				}
				if(i2c_data_mode == 2){
					length =  (i2c_string.size() > i2c_max_stringlength)?i2c_max_stringlength:i2c_string.size();
					memcpy(&recvbuffer[2], i2c_string.c_str(), length);
					
				}
				break;
			default:
				length = 0;
				recvbuffer[0] = 0;	
				break;
		}

 
		if(i2copen && p_i2c_slave->getI2CComm()->Write_I2C_Bytes(SlaveNr, recvbuffer, i2c_address_mode, length))
		{
		}						
	}

}
</%cpp>
<form action="<$ request.getUrl()$>?SlaveNr=<$ SlaveNr $>" method="post" accept-charset="ISO-8859-1">
	<input type='hidden' name='SlaveNr' value='<$ SlaveNr $>' />
	I2C address mode:
		<input type="radio" name="i2c_address_mode" value="1" <$ i2c_address_mode==1?"checked":"" $> > 8 Bit
		<input type="radio" name="i2c_address_mode" value="2" <$ i2c_address_mode==2?"checked":"" $> > 16 Bit<br>
	I2C address:
		<input name="i2c_address" value="<$ i2c_address $>"><br>	
	I2C data	
	<input type="radio" name="i2c_data_mode" value="1" <$ i2c_data_mode==1?"checked":"" $> > value: <input name="i2c_value" size="10" value="<$ i2c_value $>"><br>
	<input type="radio" name="i2c_data_mode" value="2" <$ i2c_data_mode==2?"checked":"" $> > string: <input name="i2c_string" size="<$ i2c_max_stringlength $>" maxlength="<$ i2c_max_stringlength $>" value="<$ i2c_string $>"><br>
		
	<input type="submit" name="btn_i2c_form" value="Read">
	<input type="submit" name="btn_i2c_form" value="Write">
</form>
%} else {
I2C slave[<$ SlaveNr $>] not found
%}
</div>
</%def>
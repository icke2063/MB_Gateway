<%args>
int SlaveNr = 0;
</%args>
<& common_functions.authentification qparam >
<& common_functions.doctype qparam >
<& common_functions.html_head qparam >
<& common_functions.header qparam >
<a href='slave_list.html'>SlaveList</a><br>
%shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
%if( p_slave.get() != NULL )
%{
<& form_i2c_io_board qparam>
<& I2C.form_i2c qparam>
<& I2C.form_i2c_dump qparam>
%} else {
I2C slave[<$ SlaveNr $>] not found
%}
<& common_functions.footer qparam >

<%pre>
//standard library
#include <map>

//boost library
#include "boost/serialization/singleton.hpp"

//project specific
#include <SlaveList.h>
#include <SummerySlave.h>

#include <IOBoardSlave.h>
using namespace icke2063::MB_Gateway;
#include <I2CComm.h>
using namespace icke2063::MB_Gateway::I2C;

#ifndef ICKE2063_CRUMBY_NO_CPP11
	using namespace std;
#else
using namespace boost;
#endif

//IO_Board
#include "I2C_IO_BOARD.git/base/inc/slave_eeprom_mapping.h"
#include "I2C_IO_BOARD.git/common_AVR/include/function_codes.h"
#include "I2C_IO_BOARD.git/common_AVR/include/IO_handling.h"

//logging
#include "pages_logging_macros.h"

</%pre>

<####################################################################################>
<# These variables are visible all over this file (in all functions 		    #>
<# but only for one request. After request these variables are removed from memory  #>
<####################################################################################>
<%request scope="page">
uint8_t vio_count = 0;
uint8_t vio_port_count = 0;
std::map<uint8_t,uint8_t> pin_function;
int glob_write_enable = 0;
</%request>

<############################################>
<# print i2c io board formular  	    #>
<# - main function to create io-board form  #>
<# - parameter:	see args		    #>
<############################################>
<%def form_i2c_io_board>
<%args>
int SlaveNr = 0;				// slave number: slot on which virtual RTU slave can be addressed
std::string request_table_io_board_viopin;	// marker for post data
int info = 0;					// info flag
std::string button = "";			// button value to 
</%args>
%pages_INFO_WRITE("form_i2c_io_board for slave %u", SlaveNr);
<div id="ioboard_form">
	<h1>I2C IO Board</h1>
%if(info == 1){
<a href='I2C_IO_Board.html?SlaveNr=<$$ SlaveNr $>'>Normal</a><br>
<fieldset>
<legend>IO Board static Info </legend>
<table>
<tr><th>Name</th><th>Wert</th><th>Type</th></tr>
<tr><td>I2C_BUFFER_SIZE</td><td><$ I2C_BUFFER_SIZE $></td><td>RAM-Length</td></tr>

<tr><td>ID</td><td><$ 0 $></td><td>RAM-Address</td></tr>
<tr><td>ID</td><td><$ 1 $></td><td>RAM-Address</td></tr>

<tr><td>EEPROM_WRITE_ENABLE</td><td><$ EEPROM_WRITE_ENABLE $></td><td>RAM-Address</td></tr>
<tr><td>EEPROM_WRITE_CODE</td><td><$ EEPROM_WRITE_CODE $></td><td>RAM-Value</td></tr>

<tr><td>VERSION_START</td><td><$ VERSION_START $></td><td>RAM-Address</td></tr>
<tr><td>VERSION_LENGTH</td><td><$ VERSION_LENGTH $></td><td>RAM-Length</td></tr>

<tr><td>VIRTUAL_IO_COUNT</td><td><$ VIRTUAL_IO_COUNT $></td><td>RAM-Address</td></tr>
<tr><td>VIRTUAL_IO_COUNT</td><td><$ VIRTUAL_IO_COUNT+1 $></td><td>RAM-Address</td></tr>

<tr><td>VIRTUAL_IO_START</td><td><$ VIRTUAL_IO_START $></td><td>RAM-Address</td></tr>
<tr><td>VIRTUAL_DATA_START</td><td><$ VIRTUAL_DATA_START $></td><td>RAM-Address</td></tr>

<tr><td>EEPROM_SIZE</td><td><$ EEPROM_SIZE $></td><td>EEPROM-Length</td></tr>
<tr><td>I2C ADDRESS</td><td><$ 0 + I2C_BUFFER_SIZE $></td><td>EEPROM-Address</td></tr>

<tr><td>EEPROM_PULSE_TIME</td><td><$ EEPROM_PULSE_TIME + I2C_BUFFER_SIZE $></td><td>EEPROM-Address</td></tr>

<tr><td>EEPROM_DATA_START</td><td><$ EEPROM_DATA_START + I2C_BUFFER_SIZE $></td><td>EEPROM-Address</td></tr>
<tr><td>EEPROM_FUNC_START</td><td><$ EEPROM_FUNC_START + I2C_BUFFER_SIZE $></td><td>EEPROM-Address</td></tr>
<tr><td>EEPROM_NAME_START</td><td><$ EEPROM_NAME_START + I2C_BUFFER_SIZE $></td><td>EEPROM-Address</td></tr>
<tr><td>IO_BOARD_MAX_IO_PIN_NAME_LENGTH</td><td><$ IO_BOARD_MAX_IO_PIN_NAME_LENGTH $></td><td>EEPROM-Length</td></tr>

</table>
</fieldset><!-- info --!>
%}else{//if info
<a href='I2C_IO_Board.html?SlaveNr=<$$ SlaveNr $>&info=1'>Info</a><br>
%}
<%cpp>
shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
if( p_slave.get() != NULL )
{
	shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
	
	if(p_io_board.get() == NULL)
	{
		pages_ERROR_WRITE("Slave[%u] in SlaveList is no IOBoard_Slave ", SlaveNr);
		return 0;		//no IO_Board object -> exit function
	}
	int pin;
	uint8_t recvbuffer[100];
	uint16_t i2c_address = 0;

	
	//get vio_count
	memcpy(recvbuffer, &p_io_board->getMappingDB()->tab_registers[VIRTUAL_IO_COUNT/2], 2);	//get count from modbus database
	vio_count = recvbuffer[0];	//get virtual pin count value		
	vio_port_count = ((vio_count / 8) + ((vio_count % 8) > 0 ? 1 : 0));	//calc virtual port count

	//get port values
	uint16_t vio_port[vio_port_count];
	for(int port=0;port<vio_port_count;port++)
	{
		i2c_address = (VIRTUAL_IO_START + (2*port));
		recvbuffer[0] = (i2c_address >> 8); //first high
		recvbuffer[1] = (i2c_address & 0xff); //second low	
		if (p_io_board->getI2CComm()->i2cOpen()
		    && p_io_board->getI2CComm()->Read_I2C_Bytes(SlaveNr, recvbuffer, 2, vio_port_count*2))
		{
			vio_port[port] = recvbuffer[0] << 8;
			vio_port[port] |= recvbuffer[1];
			pages_INFO_WRITE("[I2C]get port[%u] value: 0x%x", port, vio_port[port]);			
		}
		else
		{
			pages_ERROR_WRITE("[I2C]get port[%u] value: failure", port);
		}
	}
	
	//get pin function codes from internal DB (init on found IO Board slave)
	for(pin=0;pin<vio_count;pin++)
	{
		//get pin function code
		i2c_address = (I2C_BUFFER_SIZE + EEPROM_FUNC_START + (pin * 2));
		pin_function[pin] = p_io_board->getMappingDB()->tab_registers[i2c_address/2] >> 8 ;
	}
	
	//get eeprom write enable status
	memset(recvbuffer, 0, 2);
	recvbuffer[0] = (EEPROM_WRITE_ENABLE >> 8); //first high
	recvbuffer[1] = (EEPROM_WRITE_ENABLE & 0xff); //second low
	 
	if(p_io_board->getI2CComm()->i2cOpen()
	      && p_io_board->getI2CComm()->Read_I2C_Bytes(SlaveNr, recvbuffer, 2, 2))
	{
		if((recvbuffer[0] == EEPROM_WRITE_CODE) && (recvbuffer[1] == EEPROM_WRITE_CODE))
		{
			glob_write_enable = 1;
		} else {
			glob_write_enable = -1;
		}
	}
</%cpp>

%if(info == 1){
<fieldset>
<legend>IO Board dynamic Info </legend>
	vio_count: <$ (int)vio_count $><br>
	vio_port_count: <$ (int)vio_port_count $><br>
%	for(int port=0;port<vio_port_count;port++){
		vio_port[<$ (int)port $>]:<$ (int)vio_port[port] $><br>
%	}
</fieldset>
%}
%if(button == "submit"){
	<& handle_request_pin_action qparam >
	<& handle_func_select qparam >
%}
%if(button == "DB update"){p_io_board->getSlaveInfo();}
<fieldset>
<legend>IO Board device Info </legend>
<table id="table_io_board_info">
	<tr>
		<# name #>
		<th>name</th>
		<# value #>
		<th>value</th>
		<# comment #>
		<th>comment</th>
		<# action #>
		<th>action</th>
	</tr>
	<tr><# little I2C address formular #>
		<form action="<$ request.getUrl() $>?SlaveNr=<$ SlaveNr $>" method="post" accept-charset="ISO-8859-1">
			<td>I2C Add:</td>
			<td><& form_elem_I2C_address qparam></td>
			<td></td>
			<td><input type="submit" value="change"></td>
		</form>
	</tr>
	
	<tr><# little I2C pulse time formular #>
		<form action="<$ request.getUrl() $>?SlaveNr=<$ SlaveNr $>" method="post" accept-charset="ISO-8859-1">
			<td>Pulse Timeout:</td>
			<td><& form_elem_PULSE_timeout qparam></td>
			<td></td>
			<td><input type="submit" value="change"></td>
		</form>
	</tr>
	
	<tr><# numeric slave type value #>
		<td>Type:</td>
		<td><$$ (int)p_slave->getType() $></td>
		<td></td>
		<td></td>
	</tr>
	
	<tr><# git software version #>
		<td>Soft.Ver.:</td>
		<td>
<%cpp>
	// get version string from io_board slave object
	memcpy(recvbuffer, &p_io_board->getMappingDB()->tab_registers[VERSION_START/2], VERSION_LENGTH);
	recvbuffer[VERSION_LENGTH] = '\0'; //
</%cpp>
		<$ recvbuffer $>
		</td>
		<td></td>
		<td></td>
	</tr>
	
	<tr>
	<form action="<$ request.getUrl() $>?SlaveNr=<$ SlaveNr $>" method="post" accept-charset="ISO-8859-1">
		<td>R/W</td>
		<td><& form_elem_write_enable write_enable=((int)glob_write_enable) qparam></td>
		<td></td>
		<td><input type="submit" value="change"></td>
	</form>
	</tr>
</table>
</fieldset>


<fieldset>
<legend>IO Board (virtual) pin status </legend>
<form action="<$ request.getUrl() $>?SlaveNr=<$ SlaveNr $>" method="post" accept-charset="ISO-8859-1">
	<input type='hidden' name='request_table_io_board_viopin' value='data' />
	<table id="table_io_board_viopin" border = "1">
	  <######### pin number/name/status ##########>
	  <tr>
<%cpp>
//read all data from DB (even pins)
for(pin=0;pin<12;pin=pin+2){
uint16_t i2c_address = (I2C_BUFFER_SIZE) + (EEPROM_NAME_START)
				+ (pin * IO_BOARD_MAX_IO_PIN_NAME_LENGTH);
	memcpy(recvbuffer, &p_io_board->getMappingDB()->tab_registers[i2c_address/2], IO_BOARD_MAX_IO_PIN_NAME_LENGTH);
	recvbuffer[IO_BOARD_MAX_IO_PIN_NAME_LENGTH] = '\0'; //
</%cpp>
	    <td <& style_by_pin_status pin=pin pin_func=((int)pin_function[pin]) vio_port=((int)vio_port[pin/8])> ><$ 1+pin $>[<$ (glob_write_enable==1)?(int)i2c_address:0 $>]:<input name="pin_name_<$ pin $>" value="<$ recvbuffer $>"></td>
%}
	  </tr>
	  <########## ~pin number/name/status ##########>
	
	  <####### pin function code #######>
	  <tr>
%for(pin=0;pin<12;pin=pin+2){
	    <td>
	      <& print_func_select pinNr=pin func_code=((int)pin_function[pin]) write_enable=glob_write_enable qparam>
	      <& elem_pin_action	pin=pin pin_func=((int)pin_function[pin]) vio_port=((int)vio_port[pin/8])>
	    </td>
%}
	  </tr>
	  <####### ~pin function code #######>
	
%if(vio_count > 12){
	  <tr>
	    <td colspan="2"></td>
	    <td colspan="4">
	      <table border = "1">
	      <######### pin number/name/status ##########>
	      <tr>
<%cpp>
//read all data from DB
for(pin=12;pin<16;pin++){
uint16_t i2c_address = (I2C_BUFFER_SIZE) + (EEPROM_NAME_START)
				+ (pin * IO_BOARD_MAX_IO_PIN_NAME_LENGTH);
	memcpy(recvbuffer, &p_io_board->getMappingDB()->tab_registers[i2c_address/2], IO_BOARD_MAX_IO_PIN_NAME_LENGTH);
	recvbuffer[IO_BOARD_MAX_IO_PIN_NAME_LENGTH] = '\0'; //
</%cpp>
		<td <& style_by_pin_status pin=pin pin_func=((int)pin_function[pin]) vio_port=((int)vio_port[pin/8])> ><$ 1+pin $>[<$ (glob_write_enable==1)?(int)i2c_address:0 $>]:<input name="pin_name_<$ pin $>" value="<$ recvbuffer $>"></td>
%}
	      </tr>
	      <########## ~pin number/name/status ##########>
	
	      <####### pin function code #######>
	      <tr>
%for(pin=12;pin<16;pin++){
		<td>
			<& print_func_select pinNr=pin func_code=((int)pin_function[pin]) write_enable=((int)glob_write_enable) qparam>
			<& elem_pin_action	pin=pin pin_func=((int)pin_function[pin]) vio_port=((int)vio_port[pin/8])>
		</td>
%}
	      </tr>
	      <####### ~pin function code #######>
	      </table>
	    </td>
	  </tr>
%}else{	
	  <tr style="height:30px"></tr>
%}
	  <####### pin function code #######>
	  <tr>
%for(pin=1;pin<12;pin=pin+2){
	    <td>
		<& print_func_select pinNr=pin func_code=((int)pin_function[pin]) write_enable=((int)glob_write_enable) qparam>
		<& elem_pin_action	pin=pin pin_func=((int)pin_function[pin]) vio_port=((int)vio_port[pin/8])>

	    </td>
%}
	  </tr>
	  <####### ~pin function code #######>
	  <######### pin name ##########>
	  <tr>
<%cpp>
//read all names from DB
for(pin=1;pin<12;pin=pin+2){
uint16_t i2c_address = (I2C_BUFFER_SIZE) + (EEPROM_NAME_START)
				+ (pin * IO_BOARD_MAX_IO_PIN_NAME_LENGTH);
	memcpy(recvbuffer, &p_io_board->getMappingDB()->tab_registers[i2c_address/2], IO_BOARD_MAX_IO_PIN_NAME_LENGTH);
	recvbuffer[IO_BOARD_MAX_IO_PIN_NAME_LENGTH] = '\0'; //
</%cpp>
	    <td <& style_by_pin_status pin=pin pin_func=((int)pin_function[pin]) vio_port=((int)vio_port[pin/8])> ><$ 1+pin $>[<$ (glob_write_enable==1)?(int)i2c_address:0 $>]:<input name="pin_name_<$ pin $>" value="<$ recvbuffer $>"></td>
%}
	  </tr>
	  <########## ~pin name ##########>
	</table>
<input type="submit" name="button" value="submit">
<input type="submit" name="button" value="update">
<input type="submit" name="button" value="DB update">
</form>
</fieldset>
%} else {
Slave not found
%}
</div>
</%def>


<################################################################>
<# handle virtual pin function select				#>
<# - Each virtual pin has its own option			#>
<#   -> all selected values are stored within vio_func array	#>
<#   -> this function loops over all entries			#>
<#	    and write values to slave				#>
<################################################################>
<%def handle_func_select>
<%args>
std::string request_table_io_board_viopin = "";
int SlaveNr = 0;
uint16_t vio_func[];
</%args>
<%cpp>
pages_DEBUG_WRITE("\nhandle_func_select");
if(request_table_io_board_viopin != "")
{	
		
	pages_DEBUG_WRITE("request_table_io_board_viopin");
		
	uint8_t cur_pin;
	uint8_t cur_func;
	
	unsigned char recvbuffer[5];
	
	shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
	if( p_slave.get() != NULL )
	{
		shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
	
		if(p_io_board.get() == NULL)
		{
		      pages_ERROR_WRITE("No IOBoard object[%u]", SlaveNr);
		      return 0;		//no IO_Board object -> exit function
		}
	
		for(vio_func_type::const_iterator func_it = vio_func.begin();func_it != vio_func.end();++func_it)
		{
		
			cur_pin = ((uint16_t)*func_it)>>8;
			cur_func = (((uint16_t)*func_it) & 0xff);
	
			if(cur_pin != 255)
			{
				
				uint16_t i2c_address = (I2C_BUFFER_SIZE + EEPROM_FUNC_START + (cur_pin * 2));
					
				recvbuffer[0] = (i2c_address >> 8); //first high
				recvbuffer[1] = (i2c_address & 0xff); //second low
				
				recvbuffer[2] = 0;
				recvbuffer[3] = cur_func;
							
				if (p_io_board->getI2CComm()->i2cOpen()
				    && p_io_board->getI2CComm()->Write_I2C_Bytes(SlaveNr, recvbuffer, 2, 2))
				{		
					p_io_board->getMappingDB()->tab_registers[i2c_address/2] = cur_func << 8 ;	//update MB DB
					pages_INFO_WRITE("set pin[%u] to func[%u] @ [%u]: success", cur_pin, cur_func, i2c_address);
				}
				else
				{
					pages_INFO_WRITE("set pin[%u] to func[%u] @ [%u]: failure", cur_pin, cur_func, i2c_address);
				}
			}//if
		}//for
	}//if	
	else
	{
	pages_WARN_WRITE("Slave[%U] not listed", SlaveNr);
	}
}//if	
</%cpp>
</%def>



<####################################################>
<# print vio pin specific select					#>
<# param pinNr:		number of pin					#>
<#       func_code:	function code to preselect		#>
<####################################################>
<%def print_func_select>
<%args>
int pinNr = 0;
int func_code = 0;
int write_enable = 0;
int SlaveNr = 0;
</%args>
%pages_DEBUG_WRITE("[I2C]print_func_select: Slv: %u;",SlaveNr);
%if(write_enable >= 0){
<select name="vio_func" size="1">
	<option value="<$ func_code == PIN_DISABLED?(255<<8):(uint16_t)((pinNr<<8) | PIN_DISABLED) $>" <$ func_code == PIN_DISABLED?"selected":"" $>>disabled</option>
	<option value="<$ func_code == PIN_INPUT?(255<<8):(uint16_t)((pinNr<<8) | PIN_INPUT) $>" <$ func_code == PIN_INPUT?"selected":"" $>>input</option>
	<option value="<$ func_code == PIN_SWITCH?(255<<8):(uint16_t)((pinNr<<8) | PIN_SWITCH) $>" <$ func_code == PIN_SWITCH?"selected":"" $>>switch</option>
	<option value="<$ func_code == PIN_TOGGLE?(255<<8):(uint16_t)((pinNr<<8) | PIN_TOGGLE) $>" <$ func_code == PIN_TOGGLE?"selected":"" $>>toggle</option>
	<option value="<$ func_code == PIN_PULSE?(255<<8):(uint16_t)((pinNr<<8) | PIN_PULSE) $>" <$ func_code == PIN_PULSE?"selected":"" $>>pulse</option>
	<option value="<$ func_code == PIN_OW_POWER_PARASITE?(255<<8):(uint16_t)((pinNr<<8) | PIN_OW_POWER_PARASITE) $>" <$ func_code == PIN_OW_POWER_PARASITE?"selected":"" $>>ow parasite</option>
	<option value="<$ func_code == PIN_OW_POWER_EXTERN?(255<<8):(uint16_t)((pinNr<<8) | PIN_OW_POWER_EXTERN) $>" <$ func_code == PIN_OW_POWER_EXTERN?"selected":"" $>>ow power extern</option>
</select>
%}else{
%	switch(func_code)
%	{
%		case PIN_DISABLED:
			<$ "disabled" $>
%			break;
%		case PIN_INPUT:
			<$ "input" $>
%			break;
%		case PIN_SWITCH:
			<$ "switch" $>
%			break;
%		case PIN_TOGGLE:
			<$ "toggle" $>
%			break;
%		case PIN_PULSE:
			<$ "pulse" $>
%			break;
%		case PIN_OW_POWER_PARASITE:
%		case PIN_OW_POWER_EXTERN:
%		{	
			<$ "OW:" $>
<%cpp>
			uint8_t recvbuffer[VIRTUAL_DATA_LENGTH];
			uint8_t ram_virt_data_addr = 0;
			int port_num = pinNr/8;
			int pin_num = pinNr%8;

			ram_virt_data_addr = VIRTUAL_DATA_START + (port_num * (VIRTUAL_PORT_PINCOUNT * VIRTUAL_DATA_LENGTH)) + (pin_num * VIRTUAL_DATA_LENGTH);
			
			shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
			if( p_slave.get() != NULL )
			{
				shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
			
				if(p_io_board.get() == NULL)
				{
				      pages_ERROR_WRITE("No IOBoard object[%u]", SlaveNr);
				      return 0;		//no IO_Board object -> exit function
				}

				//get data by i2c request		
				memset(recvbuffer, 0, 2);
				recvbuffer[0] = (ram_virt_data_addr >> 8); //first high
				recvbuffer[1] = (ram_virt_data_addr & 0xff); //second low
			 
				if(p_io_board->getI2CComm()->i2cOpen()
				    && p_io_board->getI2CComm()->Read_I2C_Bytes(SlaveNr, recvbuffer, 2, VIRTUAL_DATA_LENGTH))
				    {
					for(int i=0;i<VIRTUAL_DATA_LENGTH;i++)
					{
</%cpp>
					[<$$ (int)((int8_t)(recvbuffer[i])) $>];
<%cpp>
					}
				}else{
					pages_ERROR_WRITE("[I2C]ow read error: Slv: %u; Addr: %u",SlaveNr, ram_virt_data_addr);
				}		
			}
			else
			{
				pages_ERROR_WRITE("No Slave object[%u]", SlaveNr);
			}
		}
		break;
		default:
</%cpp>
		<$ "unknown" $>
<%cpp>
		break;
	}
}
</%cpp>
</%def>

<########################################>
<# handle request pin action		#>
<# some vitual pins can do some action	#>
<# this function activates this action	#>
<# on slave device			#>
<########################################>
<%def handle_request_pin_action>
<%args>
std::string request_table_io_board_viopin = "";
int SlaveNr = 0;
uint16_t viopin[];
</%args>
<%cpp>
if(request_table_io_board_viopin != "")
{
	uint8_t recvbuffer[2 + (2 * vio_port_count)];	//address + 2x port count (mask + value)
	uint16_t cur_port[vio_port_count];				//temporary port values
	uint8_t cur_port_num;
	uint8_t cur_pin;
	uint8_t cur_func;
	
	/* reset temporary port values */
	for(int i=0;i<vio_port_count;i++)
	{
		cur_port[i] = 0;
	}
	
	/* 
	* init temporary port values  !!! all virtual pins !!!
	* - all switch pin masks bit have to be activated (else no deactivating possible)
	* - switch -> set switch off -> if checkbox marked switch on again
	*/
	for(std::map<uint8_t,uint8_t>::iterator func_it = pin_function.begin();func_it != pin_function.end();++func_it){//loop over all pins
	
		if((func_it->first/8) < vio_port_count)
		{
			switch(func_it->second)
			{
				case PIN_SWITCH:
					cur_port[func_it->first/8] |= (1 << func_it->first%8);	//enable port pin mask but set pin value -> off
					break;
				case PIN_TOGGLE:
				case PIN_PULSE:	
				case PIN_DISABLED:
				case PIN_INPUT:
				default:
					break;
			}
		} else {
		
		}
	}
			
	/*
	* set requested actions !!! only set checkbox pins !!!
	*/
	for(viopin_type::const_iterator it = viopin.begin();it != viopin.end();++it)
	{
		cur_port_num = (((uint16_t)*it) & 0xff)/8;	//virtual pin coded in lower byte of checkbox value -> calc port num
		cur_pin = (((uint16_t)*it) & 0xff)%8;		//same comment as before -> calc pin num
		cur_func = ((uint16_t)*it)>>8;				//function code coded in upper byte of checkbox value
	
	
		switch(cur_func)
		{
			case PIN_TOGGLE:
			case PIN_SWITCH:
			case PIN_PULSE:
				if( cur_port_num < vio_port_count)
				{
					cur_port[cur_port_num] |= (1<< cur_pin)<<8 | (1<< cur_pin);	//set mask && pin
				}
				break;
			case PIN_INPUT:
			case PIN_DISABLED:
			default:
				break;
		}
	
	}//for



	recvbuffer[0] = (VIRTUAL_IO_START >> 8); //first high
	recvbuffer[1] = (VIRTUAL_IO_START & 0xff); //second low
	
	for(int port_pos=0;port_pos< vio_port_count;port_pos++)
	{
		pages_DEBUG_WRITE("write port[%i]: 0x%x", port_pos, cur_port[port_pos]);
		recvbuffer[2+(port_pos*2)] = cur_port[port_pos] >> 8;
		recvbuffer[2+(port_pos*2)+1] = cur_port[port_pos] & 0xFF;
	}
	
	shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
	if( p_slave.get() != NULL )
	{
		shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
	
		if(p_io_board.get() == NULL)
		{
		      pages_ERROR_WRITE("No IOBoard object[%u]", SlaveNr);
		      return 0;		//no IO_Board object -> exit function
		}

		//get data by i2c request		
		if (p_io_board->getI2CComm()->i2cOpen()
		    && p_io_board->getI2CComm()->Write_I2C_Bytes(SlaveNr, recvbuffer, 2, 2 + (vio_port_count*2)))
		{
			pages_DEBUG_WRITE("handle vio pin success");
		}
	}
}//if	
</%cpp>
</%def>


<########################>
<# elem: pin_action	#>
<########################>
<%def elem_pin_action>
<%args>
int pin = 0;
int pin_func = 0;
</%args>
<%cpp>
		switch(pin_func)
		{
		case PIN_SWITCH:
		case PIN_TOGGLE:
		case PIN_PULSE:
</%cpp>
	<input type="checkbox" name="viopin" value="<$ (uint16_t)((pin_func << 8) | pin) $>">
<%cpp>		
			break;		
		case PIN_OW_POWER_PARASITE:
		case PIN_OW_POWER_EXTERN:
			break;
		case PIN_DISABLED:
		case PIN_INPUT:
		default:
			break;
	}
</%cpp>
</%def>

<################################>
<# elem: style_by_pin_status	#>
<################################>
<%def style_by_pin_status>
<%args>
int pin = 0;
int pin_func = 0;
int vio_port = 0;
std::string name = "";
</%args>
<%cpp>
	std::string back_color="rgb(190,205,205)";
	std::string text_color="rgb(255,255,255)";
		switch(pin_func)
		{
		case PIN_DISABLED:
			back_color = "rgb(0,0,0)";
			break;
		case PIN_INPUT:
			if((vio_port >> 8) & (1<<(pin%8))){
				back_color = "rgb(0,153,0)";
			}else{
				back_color = "rgb(153,0,0)";
			}
			break;
		case PIN_SWITCH:
			if((vio_port >> 8) & (1<<(pin%8))){
				back_color = "rgb(0,153,0)";
			}else{
				back_color = "rgb(153,0,0)";
			}
			break;
		case PIN_TOGGLE:
			break;
		case PIN_PULSE:
			back_color = "rgb(0,153,153)";
			break;
		case PIN_OW_POWER_PARASITE:
		case PIN_OW_POWER_EXTERN:		
			back_color = "rgb(131,111,255)";
			break;
		default:
		break;
	}
</%cpp>
style="color: <$ text_color $>; background-color: <$ back_color $>; height: 10px;"
</%def>

<############################>
<# elem:  set slave ID	    #>
<############################>
<%def form_elem_I2C_address>
<%args>
int SlaveNr = 0;	//current slave I2C address
int NSlaveNr = -1;	//new slave I2C address
</%args>
<& handle_request_I2C_address qparam>

<input type='hidden' name='request_elem_I2C_address' value='chgaddr' />
<input name="NSlaveNr" value="<$ NSlaveNr>0?NSlaveNr:SlaveNr $>">

</%def>


<##################################>
<# handle form_elem_I2C_addresse  #>
<##################################>
<%def handle_request_I2C_address>
<%args>
std::string request_elem_I2C_address ="";

int SlaveNr = 0;
int NSlaveNr = -1;	//new slave I2C address
</%args>
<%cpp>

	pages_INFO_WRITE("handle_request_I2C_address");

	uint8_t recvbuffer[3];
	if(request_elem_I2C_address == "chgaddr" 
	    && NSlaveNr > 0 
	    && NSlaveNr < 128)
	{

		pages_INFO_WRITE("try change_I2C_address");
	
		recvbuffer[0] = (I2C_BUFFER_SIZE >> 8); //first high
		recvbuffer[1] = (I2C_BUFFER_SIZE & 0xff); //second low
	
		recvbuffer[2] = NSlaveNr;
		
		shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
		if( p_slave.get() != NULL )
		{
			shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
		
			if(p_io_board.get() == NULL)
			{
			      pages_ERROR_WRITE("No IOBoard object[%u]", SlaveNr);
			      return 0;		//no IO_Board object -> exit function
			}
			//get data by i2c request		
		
			if (p_io_board->getI2CComm()->i2cOpen() 
			      && p_io_board->getI2CComm()->Write_I2C_Bytes(SlaveNr, recvbuffer, 2, 1))
			{
				pages_INFO_WRITE("Succesfull changed SlaveAddr from [%u] to [%u]", SlaveNr, NSlaveNr);
			}
			else
			{
				pages_ERROR_WRITE("Cannot change SlaveAddr from [%u] to [%u]", SlaveNr, NSlaveNr);
			}	
		}
		else
		{
			pages_ERROR_WRITE("Cannot getSlave object[%u]", SlaveNr);
		}
	}
</%cpp>
</%def>

<############################>
<# elem:  set pulse timeout	#>
<############################>
<%def form_elem_PULSE_timeout>
<%args>
int SlaveNr = 0;
int debug = 0;
</%args>
<& handle_elem_PULSE_timeout qparam>
<%cpp>

	uint8_t recvbuffer[4];
	int timeout = DEFAULT_PULSE_TIME;	//pulse timeout

	//get data by i2c request
	memset(recvbuffer, 0, 2);
	recvbuffer[0] = ((I2C_BUFFER_SIZE + EEPROM_PULSE_TIME) >> 8); //first high
	recvbuffer[1] = ((I2C_BUFFER_SIZE + EEPROM_PULSE_TIME) & 0xff); //second low
	 	
	shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
	if( p_slave.get() != NULL )
	{
		shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
	
		if(p_io_board.get() == NULL)
		{
		      pages_ERROR_WRITE("No IOBoard object[%u]", SlaveNr);
		      return 0;		//no IO_Board object -> exit function
		}
		//get data by i2c request		
		if(p_io_board->getI2CComm()->i2cOpen() 
		    && p_io_board->getI2CComm()->Read_I2C_Bytes(SlaveNr, recvbuffer, 2, 2)){		
			timeout = recvbuffer[0] << 8;
			timeout += recvbuffer[1];
			pages_INFO_WRITE("pulse timeout [%u]", timeout);
		} else {
			pages_ERROR_WRITE("cannot get pulse timeout");
		}
	}
	else
	{
		pages_ERROR_WRITE("Cannot getSlave object[%u]", SlaveNr);
	}
			
</%cpp>
	<input type='hidden' name='request_elem_PULSE_timeout' value='chgtime' />
	<input name="timeout" value="<$ timeout $>">
</%def>


<###############################>
<# handle elem_PULSE_timeout  #>
<###############################>
<%def handle_elem_PULSE_timeout>
<%args>
std::string request_elem_PULSE_timeout ="";

int SlaveNr = 0;
int timeout = -1;	//new timeout
int debug = 0;
</%args>
<%cpp>
	uint8_t recvbuffer[4];

	if(request_elem_PULSE_timeout == "chgtime" && timeout > 1)
	{
		
		recvbuffer[0] = ((I2C_BUFFER_SIZE + EEPROM_PULSE_TIME) >> 8); //first high
		recvbuffer[1] = ((I2C_BUFFER_SIZE + EEPROM_PULSE_TIME) & 0xff); //second low
	
		recvbuffer[2] = (timeout >> 8) & 0xFF;
		recvbuffer[3] = timeout & 0xFF;
		
		shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
		if( p_slave.get() != NULL )
		{
			shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
		
			if(p_io_board.get() == NULL)
			{
			      pages_ERROR_WRITE("No IOBoard object[%u]", SlaveNr);
			      return 0;		//no IO_Board object -> exit function
			}
			//get data by i2c request		
					
			if (p_io_board->getI2CComm()->i2cOpen()	
			    && p_io_board->getI2CComm()->Write_I2C_Bytes(SlaveNr, recvbuffer, 2, 2))
			{
				pages_INFO_WRITE("set pulse timeout to [%u]", timeout);	
			}
			else
			{
				pages_ERROR_WRITE("cannot set pulse timeout");			
			}	
		}
		else
		{
			pages_ERROR_WRITE("Cannot getSlave object[%u]", SlaveNr);
		}
	}
</%cpp>
</%def>


<####################################>
<# elem: eeprom write enable		#>
<####################################>
<%def form_elem_write_enable>
<%args>
int SlaveNr = 0;
int write_enable = 0;
</%args>
<& handle_request_write_enable qparam>
<%cpp>
	uint8_t recvbuffer[4];
	std::string checked = "";
	
	memset(recvbuffer, 0, 4);
	if(write_enable == 0){
		//get data by i2c request
</%cpp>
		eeprom read request
<%cpp>
		
		shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
		if( p_slave.get() != NULL )
		{
			shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
		
			if(p_io_board.get() == NULL)
			{
			      pages_ERROR_WRITE("No IOBoard object[%u]", SlaveNr);
			      return 0;		//no IO_Board object -> exit function
			}
			//get data by i2c request								
			
			recvbuffer[0] = (EEPROM_WRITE_ENABLE >> 8); //first high
			recvbuffer[1] = (EEPROM_WRITE_ENABLE & 0xff); //second low
	 
			if(p_io_board->getI2CComm()->i2cOpen()
			    && p_io_board->getI2CComm()->Read_I2C_Bytes(SlaveNr, recvbuffer, 2, 2))
			{
				if((recvbuffer[0] == EEPROM_WRITE_CODE) && (recvbuffer[1] == EEPROM_WRITE_CODE))
				{
					checked = "checked";
					pages_INFO_WRITE("[I2C]eeprom write enabled");
				}
				else
				{
					pages_INFO_WRITE("[I2C]eeprom write disabled");
				
				}
			
			}else{
				pages_ERROR_WRITE("cannot read eeprom write enable");
			}						
		}
	} else {
		//get data by param
		if(write_enable == 1)
		{
			pages_INFO_WRITE("[Param]eeprom write enabled");
			checked = "checked";
			recvbuffer[0] = EEPROM_WRITE_CODE;
			recvbuffer[1] = EEPROM_WRITE_CODE;
		}
	}
</%cpp>
	<input type='hidden' name='request_elem_write_enable' value='data' />
	<input type="checkbox" name="eeprom_write_enable" value="1" <$ checked $>>EEPROM write enable[<$$ (int)(recvbuffer[0]) $>;<$$ (int)(recvbuffer[1]) $>]
</%def>


<###############################>
<# handle eeprom write enable  #>
<###############################>
<%def handle_request_write_enable>
<%args>
std::string request_elem_write_enable ="";

int eeprom_write_enable = 0;
int SlaveNr = 0;
int debug = 0;
</%args>
<%cpp>
	uint8_t recvbuffer[4];
	if(request_elem_write_enable == "data")
	{
			
		recvbuffer[0] = (EEPROM_WRITE_ENABLE >> 8); //first high
		recvbuffer[1] = (EEPROM_WRITE_ENABLE & 0xff); //second low
	
		if(eeprom_write_enable == 1){
			recvbuffer[2] = EEPROM_WRITE_CODE;
			recvbuffer[3] = EEPROM_WRITE_CODE;
		}else{
			recvbuffer[2] = 0; 
			recvbuffer[3] = 0;
		}
		
		shared_ptr<icke2063::MB_Framework::MBVirtualRTUSlave> p_slave = boost::serialization::singleton<SlaveList>::get_mutable_instance().getSlave(SlaveNr);
		if( p_slave.get() != NULL )
		{
			shared_ptr<IOBoard_Slave> p_io_board = dynamic_pointer_cast<IOBoard_Slave>(p_slave);
		
			if(p_io_board.get() == NULL)return 0;		//no IO_Board object -> exit function
	
			//get data by i2c request							
			if (p_io_board->getI2CComm()->i2cOpen()
			    && p_io_board->getI2CComm()->Write_I2C_Bytes(SlaveNr, recvbuffer, 2, 2))
			{
				pages_DEBUG_WRITE("eeprom write enable success");
			}
			else
			{
				pages_ERROR_WRITE("eeprom write enable failure");
			}	
		}	
	}
</%cpp>
</%def>